using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using MongoDB.Bson;
using MongoDB.Driver;

namespace MongoSharp.Model
{
    [Serializable]
    public class MongoDatabaseInfo
    {
        public MongoDatabaseInfo()
        {
            Collections = new List<MongoCollectionInfo>();
        }
        [XmlAttribute]
        public string Name { get; set; }
        public List<MongoCollectionInfo> Collections { get; set; }

        [XmlIgnore]
        public MongoConnectionInfo Connection { get; set; }

        public MongoCollection<BsonDocument> GetCollection(string collectionName)
        {
            var client = new MongoClient(Connection.GetConnectionString(Name));
            var server = client.GetServer();
            var db = server.GetDatabase(Name);
            if (!db.CollectionExists(collectionName))
                throw new Exception($"Collection '{collectionName}' does not exist in database '{Name}'.");

            var collection = db.GetCollection(collectionName);

            return collection;
        }

        public override string ToString()
        {
            return Name;
        }

        public MongoCollectionInfo AddCollection(string name)
        {
            var dbInfo = new MongoCollectionInfo
                         {
                             Name = name,
                             Database = this
                         };
            Collections.Add(dbInfo);
            return dbInfo;
        }

        public MongoDatabase GetMongoDatabase()
        {
            var mongoServer = Connection.GetMongoServer(Name);

            if (!mongoServer.IsDatabaseNameValid(Name, out var message))
                return null;

            var mongoDb = mongoServer.GetDatabase(Name);
            return mongoDb;
        }

        public bool IsValid()
        {
            try
            {
                var mongoDb = GetMongoDatabase();
                if (mongoDb == null) return false;
               
                var databases = mongoDb.GetCollectionNames();
            }
            catch(Exception e)
            {
                return false;
            }

            return true;
        }

        public MongoCollectionInfo GetCollectionInfo(string collectionName)
        {
            if (Collections != null && Collections.Count > 0)
            {
                MongoCollectionInfo collectionInfo = Collections.Find(col => col.Name.Equals(collectionName));
                return collectionInfo;
            }

            return null;
        }

        public MongoCollectionModelInfo SetCollectionModel(string collectionName, string modelCode, string rootClassName,
                                       bool isAutoGenerated, int sampleSize, decimal samplePercent)
        {
            if (Collections != null && Collections.Count > 0)
            {
                var collection = Collections.Find(col => col.Name.Equals(collectionName));
                if (collection != null)
                {
                    collection.Models.Clear();
                    collection.Models.Add(new MongoCollectionModelInfo
                    {
                        Collection = collection,
                        ModelCode = modelCode,
                        RootClassName = rootClassName,
                        IsAutoGenerated = isAutoGenerated,
                        SampleSize = sampleSize,
                        SamplePercent = samplePercent
                    });
                    return collection.Models[0];
                }
            }

            if (Collections == null)
                Collections = new List<MongoCollectionInfo>();

            var newCollection = new MongoCollectionInfo
            {
                Name = collectionName,
                Database = this,
                Models = new List<MongoCollectionModelInfo>
                        {
                            new MongoCollectionModelInfo
                                {
                                    Collection = null,
                                    ModelCode = modelCode,
                                    RootClassName = rootClassName,
                                    IsAutoGenerated = isAutoGenerated,
                                    SampleSize = sampleSize,
                                    SamplePercent = samplePercent
                                }
                        }
            };
            newCollection.Models[0].Collection = newCollection;

            Collections.Add(newCollection);

            return newCollection.Models[0];
        }
    }
}
