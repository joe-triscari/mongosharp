using System;
using System.Windows.Forms;
using MongoSharp.Model;
using WeifenLuo.WinFormsUI.Docking;

namespace MongoSharp
{
    public partial class Form1 : Form
    {
        private ConnectionBrowserWindow _connectionBrowserWindow;
        private OutputWindow _outputWindow;
        private SchemaWindow _schemaWindow;

        public Form1()
        {
            InitializeComponent();
            
            //Settings.Instance.Connections.Add(new MongoConnectionInfo
            //    {
            //        Id = Guid.NewGuid().ToString(),
            //        Name = "Acctg Data BETA",
            //        ServerString = "sxmongobeta1:20100,wamongodev1:20100",
            //        Username = "accounting_",
            //        Password = "yy2WyGf6",
            //        Databases = new List<MongoDatabaseInfo>
            //            {
            //                new MongoDatabaseInfo
            //                    {
            //                        Name = "accounting"
            //                    }
            //            }
            //    });
            //Settings.Instance.Connections.Add(new MongoConnectionInfo
            //{
            //    Id = Guid.NewGuid().ToString(),
            //    Name = "Acctg Data PROD",
            //    ServerString = "qgmongodata1:30100,qgmongodata2:30100",
            //    Username = "accounting_",
            //    Password = "4PWMnQky",
            //    Databases = new List<MongoDatabaseInfo>
            //            {
            //                new MongoDatabaseInfo
            //                    {
            //                        Name = "accounting"
            //                    }
            //            }
            //});
            //Settings.Instance.Save();            

            dockPanel.AllowDrop = true;
            dockPanel.DragEnter += dockPanel_DragEnter;
            dockPanel.DragDrop += dockPanel_DragDrop;
            //dockPanel.DockBackColor = System.Drawing.Color.Wheat;            
        }

        void dockPanel_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Link;
        }

        void dockPanel_DragDrop(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof (MongoCollectionInfo)))
            {
                var mongoCollection = e.Data.GetData(typeof (MongoCollectionInfo)) as MongoCollectionInfo;
                if (mongoCollection.HasModel || Settings.Instance.Preferences.AllowAutoGeneratedModels)
                {
                    EditorWindowManager.OpenNew(mongoCollection.Database.Connection.Name, mongoCollection.Database.Name,
                                                mongoCollection.Name);
                }
                else
                {
                    _outputWindow.AppendOutput("Model for this collection has not been set.");
                }
            }
            else if (e.Data.GetDataPresent(typeof (MongoDatabaseInfo)))
            {
                var mongoDatabase = e.Data.GetData(typeof(MongoDatabaseInfo)) as MongoDatabaseInfo;
                EditorWindowManager.OpenNew(mongoDatabase.Connection.Name, mongoDatabase.Name, null);
            }
            else if (e.Data.GetDataPresent(typeof(MongoConnectionInfo)))
            {
                var mongoConnection = e.Data.GetData(typeof(MongoConnectionInfo)) as MongoConnectionInfo;
                EditorWindowManager.OpenNew(mongoConnection.Name, null, null);
            }
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            _outputWindow = new OutputWindow();
            _outputWindow.Show(dockPanel, DockState.DockBottomAutoHide);

            _connectionBrowserWindow = new ConnectionBrowserWindow();
            _connectionBrowserWindow.Show(dockPanel, DockState.DockLeft);

            _schemaWindow = new SchemaWindow();
            //_schemaWindow.Show(dockPanel, DockState.DockLeftAutoHide);

           // WindowManager.Instance.MainForm = this;
            WindowManager.Instance.MainDockPanel = dockPanel;
            WindowManager.Instance.ConnectionBrowserWindow = _connectionBrowserWindow;
            WindowManager.Instance.SchemaWindow = _schemaWindow;
            WindowManager.Instance.OutputWindow = _outputWindow;
        }

        private void toolStripButtonNew_Click(object sender, EventArgs e)
        {
            EditorWindowManager.OpenNew();
        }

        private void toolStripButtonSave_Click(object sender, EventArgs e)
        {
            EditorWindowManager.SaveActive();
        }

        private void toolStripButton1_Click(object sender, EventArgs e)
        {
            EditorWindowManager.Open();
        }

        private void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {
            Settings.Instance.Save();
        }

        private void toolStripButtonOutputWindow_Click(object sender, EventArgs e)
        {
            _outputWindow.Show(dockPanel);           
        }

        private void toolStripButtonConnectionWindow_Click(object sender, EventArgs e)
        {
            _connectionBrowserWindow.Show(dockPanel);
        }

        private void toolStripButtonCollectionWindow_Click(object sender, EventArgs e)
        {
            _schemaWindow.Show(dockPanel);
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (e.CloseReason == CloseReason.UserClosing || e.CloseReason == CloseReason.None)
            {
                bool shouldCancel = EditorWindowManager.SaveAll();
                e.Cancel = shouldCancel;
            }
        }

        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            new AboutBox {StartPosition = FormStartPosition.CenterParent}.ShowDialog(this);
        }

        private void recentToolStripMenuItem_DropDownItemClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            
        }

        private void fileToolStripMenuItem_Click(object sender, EventArgs e)
        {
            recentToolStripMenuItem.DropDown.Items.Clear();
            foreach (var file in Settings.Instance.RecentlyUsed)
            {
                recentToolStripMenuItem.DropDown.Items.Add(new ToolStripMenuItem(file, null, recentItemMenu_Click));
            }            
        }

        private void recentItemMenu_Click(object sender, EventArgs e)
        {
            EditorWindowManager.Open((sender as ToolStripMenuItem).Text);
        }

        #region File Menu
        private void newToolStripMenuItem_Click(object sender, EventArgs e)
        {
            EditorWindowManager.OpenNew();
        }

        private void openToolStripMenuItem_Click(object sender, EventArgs e)
        {
            EditorWindowManager.Open();
        }

        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            EditorWindowManager.SaveActive();
        }

        private void saveAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            EditorWindowManager.SaveAll();
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.Close();
        }
        #endregion        

        private void toolStripMenuItem4_Click(object sender, EventArgs e)
        {

        }

        #region Preferences Menu
        private void preferencesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            var frmPref = new FormPreferences();
            frmPref.StartPosition = FormStartPosition.CenterScreen;
            frmPref.ShowDialog(this);
        }
        private void toolStripButtonPreferences_Click(object sender, EventArgs e)
        {
            preferencesToolStripMenuItem_Click(sender, e);
        }
        #endregion         
        
    }
}
