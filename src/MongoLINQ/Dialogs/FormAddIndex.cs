using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using MongoDB.Driver;
using MongoDB.Driver.Builders;
using MongoDB.Bson.Serialization;

using MongoSharp.Model;

namespace MongoSharp
{
    //http://stackoverflow.com/questions/4229810/datagridviewcombobox-how-to-allow-any-value
    public partial class FormAddIndex : Form
    {
        public MongoCollectionInfo MongoCollectionInfo { get; set; }
        public bool WasCancelled { get; private set; }
        private List<PropertyData> _properties { get; set; }

        class IndexKeyInfo
        {
            public string Key { get; set; }
            public int SortType { get; set; }
        }

        public FormAddIndex()
        {
            InitializeComponent();
        }

        private void FormAddIndex_Load(object sender, EventArgs e)
        {
            WasCancelled = false;
            try
            {
                if (!MongoCollectionInfo.HasModel && !Settings.Instance.Preferences.AllowAutoGeneratedModels)
                    _properties = new List<PropertyData>();
                else
                    _properties = new MongoCodeGenerator().GetPropertiesPaths(MongoCollectionInfo.Database, MongoCollectionInfo.Name);
            }
            catch(Exception ex)
            {
                _properties = new List<PropertyData>();
            }
        }

        private void btnOk_Click(object sender, EventArgs e)
        {            
            try
            {
                if (tabControl1.SelectedTab == tabPageSelector)
                    CreateIndexBasicMode();
                else
                    CreateIndexJsonMode();

                Close();
            }
            catch(Exception ex)
            {
                MessageBox.Show(ex.Message, "Failed to Create Index");
            }            
        }

        private void CreateIndexJsonMode()
        {
            string indexJson = textBoxIndexJson.Text.Trim();
            if (string.IsNullOrWhiteSpace(indexJson))
                throw new Exception("Enter index json.");

            IndexKeysDocument keys = null;
            try
            {
                keys = BsonSerializer.Deserialize<IndexKeysDocument>(indexJson);
            }
            catch(Exception ex1)
            {
                throw new Exception($"Invalid index json.\r\n\r\n{ex1.Message}");
            }

            string optionJson = textBoxIndexOptionsJson.Text.Trim();
            IndexOptionsDocument options = null;
            if(string.IsNullOrWhiteSpace(optionJson))
            {
                options = new IndexOptionsDocument();
            }
            else
            {
                try
                {
                    options = BsonSerializer.Deserialize<IndexOptionsDocument>(optionJson);
                }
                catch (Exception ex1)
                {
                    throw new Exception($"Invalid options json.\r\n\r\n{ex1.Message}");
                }
            }

            if (!options.Contains("name"))
            {
                string indexName = txtBoxIndexName.Text;
                if (string.IsNullOrWhiteSpace(indexName))
                    throw new Exception("Please enter an index name.");

                options.Add("name", indexName);
            }

            if (!options.Contains("unique"))
                options.Add("unique", checkBoxUnique.Checked);
            if (!options.Contains("dropDups") && checkBoxUnique.Checked)
                options.Add("dropDups", checkBoxDropDups.Checked);
            if (!options.Contains("background"))
                options.Add("background", checkBoxBackground.Checked);
            if (!options.Contains("sparse"))
                options.Add("sparse", checkBoxSparse.Checked);

            var mongoCollection = MongoCollectionInfo.GetMongoCollection();
            WriteConcernResult writeConcernResult = mongoCollection.CreateIndex(keys, options);
            if (writeConcernResult.HasLastErrorMessage)
                throw new Exception(writeConcernResult.LastErrorMessage);
        }

        private void CreateIndexBasicMode()
        {
            string indexName = txtBoxIndexName.Text;
            if (string.IsNullOrWhiteSpace(indexName))
                throw new Exception("Please enter an index name.");

            var mongoCollection = MongoCollectionInfo.GetMongoCollection();
            var indexes = mongoCollection.GetIndexes();
            if (indexes != null && indexes.Any())
                if (indexes.ToList().Exists(i => i.Name == indexName))
                    throw new Exception("An index with that name already exists.");

            var keys = GetChoosenKeys();
            if (!keys.Any())
                throw new Exception("You must choose at least one key.");

            var keyBuilder = new IndexKeysBuilder();

            foreach (var key in keys)
            {
                if (key.SortType == 1)
                    keyBuilder = keyBuilder.Ascending(key.Key);
                else if (key.SortType == -1)
                    keyBuilder = keyBuilder.Descending(key.Key);
                else if (key.SortType == 2)
                    keyBuilder = keyBuilder.GeoSpatial(key.Key);
                else if (key.SortType == 3)
                    keyBuilder = keyBuilder.GeoSpatialHaystack(key.Key);
            }
            var optionBuilder = new IndexOptionsBuilder();
            optionBuilder.SetUnique(checkBoxUnique.Checked);
            optionBuilder.SetBackground(checkBoxBackground.Checked);
            optionBuilder.SetDropDups(checkBoxUnique.Checked && checkBoxDropDups.Checked);
            optionBuilder.SetSparse(checkBoxSparse.Checked);
            optionBuilder.SetName(indexName);

            var writeConcernResult = mongoCollection.CreateIndex(keyBuilder, optionBuilder);
            if (writeConcernResult.HasLastErrorMessage)
                throw new Exception(writeConcernResult.LastErrorMessage);
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            WasCancelled = true;
            Close();
        }

        private void dataGridViewIndex_RowsAdded(object sender, DataGridViewRowsAddedEventArgs e)
        {
            //var addedRow = dataGridViewIndex.Rows[e.RowIndex];

            //setCellComboBoxItems(dataGridViewIndex, e.RowIndex, 0, new string[] { "Testing..." });
           // dataGridViewIndex.AutoResizeColumns();
           // dataGridViewIndex.Refresh();
        }

        private void btnAddIndex_Click(object sender, EventArgs e)
        {
            var newRowIndex = dataGridViewIndex.Rows.Add();
            var propertyColumn = (DataGridViewComboBoxCell)dataGridViewIndex.Rows[newRowIndex].Cells[0];
            propertyColumn.Items.Clear();
            GetAvailableProperties().ForEach(p => propertyColumn.Items.Add(p));

            var sortColumn = (DataGridViewComboBoxCell)dataGridViewIndex.Rows[newRowIndex].Cells[1];
            sortColumn.Items.Clear();
           // new List<string> { "Ascending", "Descending", "Geospatial", "Geospatial Haystack" }.ForEach(x => sortColumn.Items.Add(x));
            new List<string> { "Ascending", "Descending"}.ForEach(x => sortColumn.Items.Add(x));
            dataGridViewIndex.Rows[newRowIndex].Cells[1].Value = "Ascending";
        }

        private List<IndexKeyInfo> GetChoosenKeys()
        {
            var indexes = new List<IndexKeyInfo>();

            foreach (DataGridViewRow row in dataGridViewIndex.Rows)
            {
                if (row.Cells[0].Value == null)
                    continue;

                string sortDescr = row.Cells[1].Value.ToString();
                indexes.Add(new IndexKeyInfo
                    {
                        Key = row.Cells[0].Value.ToString(),
                        SortType = sortDescr.StartsWith("Asc") ? 1 :
                                    sortDescr.StartsWith("Desc") ? -1 : 
                                    sortDescr.StartsWith("Geospatial Haystack") ? 3 : 2
                    });
            }

            return indexes;
        }

        private List<string> GetAvailableProperties()
        {
            var used = GetUsedProperties();
            return (from p in _properties
                    where !used.Exists(u => u.Equals(p.Path)) &&
                           !p.Path.Contains("[")
                    select p.Path).ToList();
        }

        private List<string> GetUsedProperties()
        {
            var props = new List<string>();

            foreach (DataGridViewRow row in dataGridViewIndex.Rows)
            {
                if (row.Cells[0].Value != null)
                    props.Add((string)row.Cells[0].Value);
            }

            return props;
        }

        private void dataGridViewIndex_EditingControlShowing(object sender, DataGridViewEditingControlShowingEventArgs e)
        {
            if (!_properties.Any())
            {
                ComboBox c = e.Control as ComboBox;
                if (c != null) c.DropDownStyle = ComboBoxStyle.DropDown;
            }
        }

        private void dataGridViewIndex_CellValidating(object sender, DataGridViewCellValidatingEventArgs e)
        {
            if (!_properties.Any() && e.ColumnIndex == this.Index.Index)
            {
                object eFV = e.FormattedValue;
                if (!this.Index.Items.Contains(eFV))
                {
                    this.Index.Items.Add(eFV);
                    dataGridViewIndex.Rows[e.RowIndex].Cells[e.ColumnIndex].Value = eFV;
                }
            }
        }

        private void btnOk_Click_1(object sender, EventArgs e)
        {
            btnOk_Click(sender, e);
        }

        private void checkBoxUnique_CheckedChanged(object sender, EventArgs e)
        {
            checkBoxDropDups.Enabled = checkBoxUnique.Checked;
        }

        private void buttonRemoveIndex_Click(object sender, EventArgs e)
        {
            if(dataGridViewIndex.CurrentCell == null)
                return;
            int rowIndex = dataGridViewIndex.CurrentCell.RowIndex;
            if (rowIndex < 0)
                return;

            dataGridViewIndex.Rows.RemoveAt(rowIndex);
        }

        private void comboBoxIndexTypes_SelectedIndexChanged(object sender, EventArgs e)
        {
            textBoxIndexJson.Text = "";
            textBoxIndexOptionsJson.Text = "";

            switch(comboBoxIndexTypes.Text)
            {
                case "2d":
                    textBoxIndexJson.Text = "{\r\n  <location field> : \"2d\",\r\n  <additional field> : <value>\r\n}";
                    textBoxIndexOptionsJson.Text = "{\r\n  min : <lower bound>,\r\n  max : <upper bound>,\r\n  bits : <bit precision>\r\n}";
                    linkLabelIndexTutorial.Visible = true;
                    break;
                case "2dsphere":
                    textBoxIndexJson.Text = "{ <location field> : \"2dsphere\" }";
                    linkLabelIndexTutorial.Visible = true;
                    break;
                case "ascending":
                    textBoxIndexJson.Text = "{\r\n  <field> : 1,\r\n  <additional field> : <value>\r\n}";
                    linkLabelIndexTutorial.Visible = false;
                    break;
                case "descending":
                    textBoxIndexJson.Text = "{\r\n  <field> : -1,\r\n  <additional field> : <value>\r\n}";
                    linkLabelIndexTutorial.Visible = false;
                    break;
            }

            
        }

        private void linkLabelIndexTutorial_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            switch (comboBoxIndexTypes.Text)
            {
                case "2d":
                    System.Diagnostics.Process.Start("http://docs.mongodb.org/manual/tutorial/build-a-2d-index/");
                    break;
                case "2dsphere":
                    System.Diagnostics.Process.Start("http://docs.mongodb.org/manual/tutorial/build-a-2dsphere-index/");
                    break;
            }
        }

        private void btnIndexJsonClear_Click(object sender, EventArgs e)
        {
            textBoxIndexJson.Text = "";
        }

        private void btnIndexOptionsJsonClear_Click(object sender, EventArgs e)
        {
            textBoxIndexOptionsJson.Text = "";
        }

        private void linkLabelHelp_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            System.Diagnostics.Process.Start("http://docs.mongodb.org/manual/administration/indexes-creation/");
        }

    }
}
