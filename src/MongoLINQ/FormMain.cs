using System;
using System.Windows.Forms;
using MongoSharp.Model;
using WeifenLuo.WinFormsUI.Docking;
using System.IO;

namespace MongoSharp
{
    public partial class FormMain : RibbonForm
    {
        private readonly ToolStripRenderer _system = new ToolStripProfessionalRenderer();
        private readonly ToolStripRenderer _custom = new VS2012ToolStripRenderer();

        private ConnectionBrowserWindow _connectionBrowserWindow;
        private OutputWindow _outputWindow;
        private SchemaWindow _schemaWindow;
        private CodeSnippetsWindow _codeSnippetsWindow;

        public FormMain()
        {
            InitializeComponent();

            this.StartPosition = FormStartPosition.CenterScreen;
            this.WindowState = FormWindowState.Maximized;

            dockPanel.AllowDrop = true;
            dockPanel.DragEnter += dockPanel_DragEnter;
            dockPanel.DragDrop += dockPanel_DragDrop;
            dockPanel.ShowDocumentIcon = true;
        }

        private void FormMain_Load(object sender, EventArgs e)
        {
            dockPanel.DockLeftPortion = .20D;
            _outputWindow = new OutputWindow();
            _outputWindow.Show(dockPanel, DockState.DockBottomAutoHide);

            _connectionBrowserWindow = new ConnectionBrowserWindow();
            _connectionBrowserWindow.Show(dockPanel, DockState.DockLeft);

            _schemaWindow = new SchemaWindow();
            //_schemaWindow.Show(dockPanel, new Rectangle(98, 133, 200, 383));

            _codeSnippetsWindow = new CodeSnippetsWindow();
            _codeSnippetsWindow.Show(dockPanel, DockState.DockRightAutoHide);
            _codeSnippetsWindow.OnInsertCode += (code) =>
                            {
                                if (dockPanel.ActiveDocument is EditorWindow)
                                {
                                    var editorWindow = dockPanel.ActiveDocument as EditorWindow;
                                    editorWindow.InsertText(code);
                                }
                            };

            Theme.ColorTable = new MongoSharpTheme();

            WindowManager.Instance.MainForm = this;
            WindowManager.Instance.MainDockPanel = dockPanel;
            WindowManager.Instance.HomeRibbonTab = ribbonTabHome;
            WindowManager.Instance.ClipBoardRibbonPanel = ribbonPanelClipboard;
            WindowManager.Instance.EditorRibbonPanel = ribbonPanelEditor;
            WindowManager.Instance.ConnectionBrowserWindow = _connectionBrowserWindow;
            WindowManager.Instance.SchemaWindow = _schemaWindow;
            WindowManager.Instance.OutputWindow = _outputWindow;
            WindowManager.Instance.CodeSnippetsWindow = _codeSnippetsWindow;

            UpdateRecentFiles();
        }


        private void FormMain_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (e.CloseReason == CloseReason.UserClosing || e.CloseReason == CloseReason.None)
            {
                bool shouldCancel = EditorWindowManager.SaveAll();
                e.Cancel = shouldCancel;
            }
        }

        private void FormMain_FormClosed(object sender, FormClosedEventArgs e)
        {
            Settings.Instance.Save();
        }

        void dockPanel_DragEnter(object sender, DragEventArgs e)
        {
            e.Effect = DragDropEffects.Link;
        }

        void dockPanel_DragDrop(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(MongoCollectionInfo)))
            {
                var mongoCollection = e.Data.GetData(typeof(MongoCollectionInfo)) as MongoCollectionInfo;
                if (mongoCollection.HasModel || Settings.Instance.Preferences.AllowAutoGeneratedModels)
                {
                    EditorWindowManager.OpenNew(mongoCollection.Database.Connection.Name, mongoCollection.Database.Name,
                                                mongoCollection.Name);
                }
                else
                {
                    _outputWindow.AppendOutput("Model for this collection has not been set.");
                }
            }
            else if (e.Data.GetDataPresent(typeof(MongoDatabaseInfo)))
            {
                var mongoDatabase = e.Data.GetData(typeof(MongoDatabaseInfo)) as MongoDatabaseInfo;
                EditorWindowManager.OpenNew(mongoDatabase.Connection.Name, mongoDatabase.Name, null);
            }
            else if (e.Data.GetDataPresent(typeof(MongoConnectionInfo)))
            {
                var mongoConnection = e.Data.GetData(typeof(MongoConnectionInfo)) as MongoConnectionInfo;
                EditorWindowManager.OpenNew(mongoConnection.Name, null, null);
            }
        }

        #region Ribbon Events
        private void ribbonButtonNew_Click(object sender, EventArgs e)
        {
            EditorWindowManager.OpenNew();
        }

        private void ribbonButtonPreferences_Click(object sender, EventArgs e)
        {
            var frmPref = new FormPreferences();
            frmPref.StartPosition = FormStartPosition.CenterScreen;
            frmPref.ShowDialog(this);
        }

        private void ribbonButtonOpen_Click(object sender, EventArgs e)
        {
            EditorWindowManager.Open();
            UpdateRecentFiles();
        }

        private void ribbonButtonSave_Click(object sender, EventArgs e)
        {
            EditorWindowManager.SaveActive();
            UpdateRecentFiles();
        }

        private void ribbonButtonSaveAs_Click(object sender, EventArgs e)
        {
            EditorWindowManager.SaveActive(true);
            UpdateRecentFiles();
        }

        private void ribbonButtonRecent_DropDownShowing(object sender, EventArgs e)
        {
        }

        private void ribbonButtonShowOutput_Click(object sender, EventArgs e)
        {
            if (_outputWindow.IsActivated)
                _outputWindow.Show(dockPanel, DockState.DockBottomAutoHide);
            else
                _outputWindow.Show(dockPanel, DockState.DockBottom);
        }

        private void ribbonButtonShowConnectionBrowser_Click(object sender, EventArgs e)
        {
            if (_connectionBrowserWindow.IsActivated)
                _connectionBrowserWindow.Show(dockPanel, DockState.DockLeftAutoHide);
            else
                _connectionBrowserWindow.Show(dockPanel, DockState.DockLeft);
        }

        private void dockPanel_ActiveContentChanged(object sender, EventArgs e)
        {

        }

        private void ribbonButtonAbout_Click(object sender, EventArgs e)
        {
            new AboutBox { StartPosition = FormStartPosition.CenterParent }.ShowDialog(this);
        }

        #region Orb
        private void ribbonButtonOrbOptionExit_Click(object sender, EventArgs e)
        {
            Close();
        }
        #endregion

        #endregion

        private void UpdateRecentFiles()
        {
            ribbonButtonRecent.DropDownItems.Clear();
            ribbon1.OrbDropDown.RecentItems.Clear();
            foreach (var file in Settings.Instance.RecentlyUsed)
            {
                var item = new RibbonButton(file);
                item.Click += (s, ev) =>
                {
                    if (!File.Exists(file))
                    {
                        var result = MessageBox.Show("This file no longer exists. Remove it from the recently used list?", "File Does Not Exist", MessageBoxButtons.YesNoCancel);

                        if (result == DialogResult.Yes)
                        {
                            Settings.Instance.RecentlyUsed.Remove(file);

                        }
                    }
                    else
                        EditorWindowManager.Open(file);

                    UpdateRecentFiles();
                };
                ribbonButtonRecent.DropDownItems.Add(item);
                ribbon1.OrbDropDown.RecentItems.Add(item);
            }
        }

        public void DoCreateCodeSnippet()
        {
            ribbonButtonCreateCodeSnippet_Click(null, null);
        }
        private void ribbonButtonCreateCodeSnippet_Click(object sender, EventArgs e)
        {
            if (WindowManager.Instance.ActiveEditorWindow != null)
            {
                var editorWindow = WindowManager.Instance.ActiveEditorWindow;
                string selectedText = editorWindow.GetSelectedText();
                if(String.IsNullOrWhiteSpace(selectedText))
                {
                    MessageBox.Show("Select text to create a code snippet from.", "Code Snippet");
                    return;
                }

                var frmSnippets = new FormAddCodeSnippet { StartPosition = FormStartPosition.CenterScreen };
                frmSnippets.ShowDialog(this);
                if (frmSnippets.CodeSnippet == null)
                    return;

                try
                {
                    
                    WindowManager.Instance.CodeSnippetsWindow.AddCodeSnippet(new CodeSnippet
                                                                {
                                                                    Name = frmSnippets.CodeSnippet.Name,
                                                                    Description = frmSnippets.CodeSnippet.Description,
                                                                    Code = selectedText
                                                                });
                }
                catch(Exception ex)
                {
                    MessageBox.Show(ex.Message, "Code Snippet");
                }
                
            }
        }

        private void ribbonButtonViewCodeSnippets_Click(object sender, EventArgs e)
        {
            if (_codeSnippetsWindow == null || _codeSnippetsWindow.IsDisposed)
            {
                _codeSnippetsWindow = new CodeSnippetsWindow();
                _codeSnippetsWindow.Show(dockPanel, DockState.DockRightAutoHide);
                _codeSnippetsWindow.OnInsertCode += (code) =>
                {
                    if (dockPanel.ActiveDocument is EditorWindow)
                    {
                        var editorWindow = dockPanel.ActiveDocument as EditorWindow;
                        editorWindow.InsertText(code);
                    }
                };
            }
            _codeSnippetsWindow.Show(dockPanel, DockState.DockRight);
        }

        private void ribbonButtonUndo_Click(object sender, EventArgs e)
        {
            WindowManager.Instance.ActiveEditorWindow.ScintillaEditor.UndoRedo.Undo();
        }

        private void ribbonButtonRedo_Click(object sender, EventArgs e)
        {
            WindowManager.Instance.ActiveEditorWindow.ScintillaEditor.UndoRedo.Redo();
        }

        private void ribbonButtonCut_Click(object sender, EventArgs e)
        {
            WindowManager.Instance.ActiveEditorWindow.ScintillaEditor.Clipboard.Cut();
        }

        private void ribbonButtonCopy_Click(object sender, EventArgs e)
        {
            WindowManager.Instance.ActiveEditorWindow.ScintillaEditor.Clipboard.Copy();
        }

        private void ribbonButtonPaste_Click(object sender, EventArgs e)
        {
            WindowManager.Instance.ActiveEditorWindow.ScintillaEditor.Clipboard.Paste();
        }

        private void ribbonButtonToolsShowPreferences_Click(object sender, EventArgs e)
        {
            var frmPref = new FormPreferences {StartPosition = FormStartPosition.CenterScreen};
            frmPref.ShowDialog(this);
        }
    }
}
